// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	sqs "github.com/aws/aws-sdk-go/service/sqs"
	mock "github.com/stretchr/testify/mock"

	xsqs "github.com/yklyahin/xsqs"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, message
func (_m *Client) Delete(ctx context.Context, message *sqs.Message) error {
	ret := _m.Called(ctx, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqs.Message) error); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBatch provides a mock function with given fields: ctx, messages
func (_m *Client) DeleteBatch(ctx context.Context, messages []*sqs.Message) error {
	ret := _m.Called(ctx, messages)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*sqs.Message) error); ok {
		r0 = rf(ctx, messages)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Receive provides a mock function with given fields: ctx, limit
func (_m *Client) Receive(ctx context.Context, limit int) ([]*sqs.Message, error) {
	ret := _m.Called(ctx, limit)

	var r0 []*sqs.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*sqs.Message, error)); ok {
		return rf(ctx, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*sqs.Message); ok {
		r0 = rf(ctx, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*sqs.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Retry provides a mock function with given fields: ctx, input
func (_m *Client) Retry(ctx context.Context, input xsqs.RetryInput) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, xsqs.RetryInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RetryBatch provides a mock function with given fields: ctx, input
func (_m *Client) RetryBatch(ctx context.Context, input []xsqs.RetryInput) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []xsqs.RetryInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t mockConstructorTestingTNewClient) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
